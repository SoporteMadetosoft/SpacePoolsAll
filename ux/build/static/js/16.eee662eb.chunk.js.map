{"version":3,"sources":["@core/components/input-password-toggle/index.js","views/authentication/Register.js"],"names":["InputPasswordToggle","props","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","addonType","onClick","style","backgroundColor","size","renderIcon","defaultProps","Register","ability","useContext","AbilityContext","useSkin","skin","history","useHistory","dispatch","useDispatch","useForm","register","errors","handleSubmit","trigger","email","setEmail","valErrors","setValErrors","username","setUsername","password","setPassword","setTerms","illustration","source","require","default","Terms","href","e","preventDefault","to","lg","sm","src","alt","md","tag","action","onSubmit","isObjEmpty","useJwt","then","res","data","error","arr","property","console","user","accessToken","update","handleLogin","push","catch","err","log","autoFocus","value","name","onChange","errs","target","innerRef","required","validate","Object","keys","length","checked","invalid","terms","Ripple","block","color"],"mappings":"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","file":"static/js/16.eee662eb.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer' style={{backgroundColor: 'transparent !important'}}>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","import { Fragment, useState, useContext } from 'react'\nimport { isObjEmpty } from '@utils'\nimport classnames from 'classnames'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { handleLogin } from '@auth/redux/actions'\nimport { Link, useHistory } from 'react-router-dom'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\nimport { Row, Col, CardTitle, CardText, FormGroup, Label, Button, Form, Input, CustomInput } from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst Register = () => {\n  const ability = useContext(AbilityContext)\n\n  const [skin, setSkin] = useSkin()\n\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n\n  const { register, errors, handleSubmit, trigger } = useForm()\n\n  const [email, setEmail] = useState('')\n  const [valErrors, setValErrors] = useState({})\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [terms, setTerms] = useState(false)\n\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const Terms = () => {\n    return (\n      <Fragment>\n        I agree to\n        <a className='ml-25' href='/' onClick={e => e.preventDefault()}>\n          privacy policy & terms\n        </a>\n      </Fragment>\n    )\n  }\n\n  const onSubmit = () => {\n    if (isObjEmpty(errors)) {\n      useJwt\n        .register({ username, email, password })\n        .then(res => {\n          if (res.data.error) {\n            const arr = {}\n            for (const property in res.data.error) {\n              if (res.data.error[property] !== null) arr[property] = res.data.error[property]\n            }\n            setValErrors(arr)\n            if (res.data.error.email !== null) console.error(res.data.error.email)\n            if (res.data.error.username !== null) console.error(res.data.error.username)\n          } else {\n            setValErrors({})\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\n            ability.update(res.data.user.ability)\n            dispatch(handleLogin(data))\n            history.push('/')\n          }\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n  const handleUsernameChange = e => {\n    const errs = valErrors\n    if (errs.username) delete errs.username\n    setUsername(e.target.value)\n    setValErrors(errs)\n  }\n\n  const handleEmailChange = e => {\n    const errs = valErrors\n    if (errs.email) delete errs.email\n    setEmail(e.target.value)\n    setValErrors(errs)\n  }\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <h2 className='brand-text text-primary ml-1'>Space Pools</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Adventure starts here 🚀\n            </CardTitle>\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\n\n            <Form action='/' className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <FormGroup>\n                <Label className='form-label' for='register-username'>\n                  Username\n                </Label>\n                <Input\n                  autoFocus\n                  type='text'\n                  value={username}\n                  placeholder='johndoe'\n                  id='register-username'\n                  name='register-username'\n                  onChange={handleUsernameChange}\n                  className={classnames({ 'is-invalid': errors['register-username'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n                {Object.keys(valErrors).length && valErrors.username ? (\n                  <small className='text-danger'>{valErrors.username}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <Input\n                  type='email'\n                  value={email}\n                  id='register-email'\n                  name='register-email'\n                  onChange={handleEmailChange}\n                  placeholder='john@example.com'\n                  className={classnames({ 'is-invalid': errors['register-email'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n                {Object.keys(valErrors).length && valErrors.email ? (\n                  <small className='text-danger'>{valErrors.email}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <InputPasswordToggle\n                  value={password}\n                  id='register-password'\n                  name='register-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['register-password'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput\n                  type='checkbox'\n                  id='terms'\n                  name='terms'\n                  value='terms'\n                  label={<Terms />}\n                  className='custom-control-Primary'\n                  innerRef={register({ required: true })}\n                  onChange={e => setTerms(e.target.checked)}\n                  invalid={errors.terms && true}\n                />\n              </FormGroup>\n              <Button.Ripple type='submit' block color='primary'>\n                Sign up\n              </Button.Ripple>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='mr-25'>Already have an account?</span>\n              <Link to='/login'>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button.Ripple color='facebook'>\n                <Facebook size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='twitter'>\n                <Twitter size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='google'>\n                <Mail size={14} />\n              </Button.Ripple>\n              <Button.Ripple className='mr-0' color='github'>\n                <GitHub size={14} />\n              </Button.Ripple>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Register\n"],"sourceRoot":""}